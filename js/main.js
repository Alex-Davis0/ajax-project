const dwarf = 'https://api.open5e.com/races/dwarf';
const elf = 'https://api.open5e.com/races/elf';
const halfling = 'https://api.open5e.com/races/halfling';
const human = 'https://api.open5e.com/races/human';
const dragonborn = 'https://api.open5e.com/races/dragonborn';
const gnome = 'https://api.open5e.com/races/gnome';
const halfelf = 'https://api.open5e.com/races/half-elf';
const halforc = 'https://api.open5e.com/races/half-orc';
const tiefling = 'https://api.open5e.com/races/tiefling';

function getApi(url) {
  const xhr = new XMLHttpRequest();
  xhr.open('GET', url, false);
  xhr.send();
  return xhr.responseText;
}

function getRaceDescripton(test, holder) {
  const App = getApi(test);
  const AppData = JSON.parse(App);
  Array.from([AppData]).forEach(item => {
    const container = document.createElement('div');
    const raceName = document.createElement('h2');
    raceName.setAttribute('class', 'font');
    raceName.textContent = item.name;
    container.appendChild(raceName);
    const abilityH2 = document.createElement('h2');
    abilityH2.setAttribute('class', 'font');
    abilityH2.textContent = 'Ability Score Increase';
    container.appendChild(abilityH2);
    const ability = document.createElement('p');
    ability.setAttribute('class', 'text');
    ability.textContent = item.asi_desc.slice(30);
    container.appendChild(ability);
    const speedH2 = document.createElement('h2');
    speedH2.setAttribute('class', 'font');
    speedH2.textContent = 'Speed';
    container.appendChild(speedH2);
    const speed = document.createElement('p');
    speed.setAttribute('class', 'text');
    speed.textContent = item.speed_desc.slice(13);
    container.appendChild(speed);
    const darkVisionH2 = document.createElement('h2');
    darkVisionH2.setAttribute('class', 'font');
    darkVisionH2.textContent = 'Darkvision';
    container.appendChild(darkVisionH2);
    const darkVision = document.createElement('p');
    darkVision.setAttribute('class', 'text');
    darkVision.textContent = item.vision.slice(18);
    container.appendChild(darkVision);
    const ageH2 = document.createElement('h2');
    ageH2.setAttribute('class', 'font');
    ageH2.textContent = 'Age';
    container.appendChild(ageH2);
    const age = document.createElement('p');
    age.setAttribute('class', 'text');
    age.textContent = item.age.slice(11);
    container.appendChild(age);
    const alignmentH2 = document.createElement('h2');
    alignmentH2.setAttribute('class', 'font');
    alignmentH2.textContent = 'Alignment';
    container.appendChild(alignmentH2);
    const alignment = document.createElement('p');
    alignment.setAttribute('class', 'text');
    alignment.textContent = item.alignment.slice(17);
    container.appendChild(alignment);
    const sizeH2 = document.createElement('h2');
    sizeH2.setAttribute('class', 'font');
    sizeH2.textContent = 'Size';
    container.appendChild(sizeH2);
    const size = document.createElement('p');
    size.setAttribute('class', 'text');
    size.textContent = item.size.slice(12);
    container.appendChild(size);
    const languagesH2 = document.createElement('h2');
    languagesH2.setAttribute('class', 'font');
    languagesH2.textContent = 'Languages';
    container.appendChild(languagesH2);
    const languages = document.createElement('p');
    languages.setAttribute('class', 'text');
    languages.textContent = item.languages.slice(17);
    container.appendChild(languages);
    const traitsText = item.traits.replaceAll('._', ':');
    const traitText = traitsText.replaceAll('*', '');
    const finalTraitsText = traitText.replaceAll('_', '');
    const traitsH2 = document.createElement('h2');
    traitsH2.setAttribute('class', 'font');
    traitsH2.textContent = 'Traits';
    container.appendChild(traitsH2);
    const traits = document.createElement('p');
    traits.setAttribute('class', 'text');
    traits.textContent = finalTraitsText;
    container.appendChild(traits);
    document.getElementsByClassName(holder)[0].appendChild(container);
  });
}

getRaceDescripton(dwarf, 'dwarf');
getRaceDescripton(elf, 'elf');
getRaceDescripton(halfling, 'halfling');
getRaceDescripton(human, 'human');
getRaceDescripton(dragonborn, 'dragonborn');
getRaceDescripton(gnome, 'gnome');
getRaceDescripton(halfelf, 'halfelf');
getRaceDescripton(halforc, 'halforc');
getRaceDescripton(tiefling, 'tiefling');
